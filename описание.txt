Описание работы сервиса и команды
Этот проект реализует веб-приложение с помощью FastAPI для управления пользователями, чатами, и системой авторизации. Сервис предоставляет возможность пользователям общаться через WebSocket, получать и отправлять сообщения, а также выполнять административные операции. Разделение ответственности реализовано через маршруты для обычных пользователей, администраторов и авторизации.

Основные компоненты и функционал
1. Авторизация и регистрация
Маршруты:

/register: регистрация нового пользователя.
/login: вход в систему с генерацией токена.
Используемые технологии:

Токены JWT для аутентификации.
OAuth2PasswordBearer для получения токена.
2. Работа с чатами
Маршрут WebSocket:

/ws/chat: создание подключения для обмена сообщениями.
Функционал:
docker-compose pull greenatom-web

Проверка токена перед подключением.
Возможность отправки сообщений между пользователями.
Отключение WebSocket при нарушении политики (например, неверный токен).
3. Работа с сообщениями
Маршруты для пользователей:

/getallmessages: получить все сообщения.
/getallchats: получить все чаты.
/getreadedmessages: получить прочитанные сообщения.
/getnotreadedmessages: получить непрочитанные сообщения.
/readnotreaded: отметить все непрочитанные сообщения как прочитанные.
/readnotreadedfromuser: отметить сообщения от конкретного пользователя как прочитанные.
4. Административные команды
Маршруты для администраторов:

/readuserchats: получить все чаты конкретного пользователя.
/getallactiveusers: получить список активных пользователей.
/blockuser: заблокировать пользователя.
/unblockuser: разблокировать пользователя.
Функционал:

Проверка, что пользователь является администратором.
Управление доступом пользователей к системе.
Архитектура
FastAPI используется для реализации API и маршрутов.
WebSocket для чатов.
SQLAlchemy (Async) для асинхронного взаимодействия с базой данных.
JWT для безопасной авторизации.
Маршруты разделены:
auth_router: для авторизации и регистрации.
user_router: для операций пользователя.
admin_router: для административных операций.
Управление WebSocket:
ws_manager для отслеживания подключений.
Примеры команд и взаимодействий
Пользовательский сценарий:
Пользователь регистрируется через /register и получает токен.
Авторизуется через /login, получая токен для доступа.
Подключается к WebSocket /ws/chat для общения.
Читает и управляет своими сообщениями через API /getallmessages и другие.
Администраторский сценарий:
Авторизуется с токеном администратора.
Получает список активных пользователей через /getallactiveusers.
Блокирует пользователя через /blockuser.
Примечания
Используемый SECRET_KEY и ALGORITHM критически важны для безопасности. Они должны быть надежно защищены.
Для повышения удобства можно добавить обработку ошибок с пользовательскими сообщениями и логирование действий.





